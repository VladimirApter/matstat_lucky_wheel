import pandas as pd
from flask import Flask, render_template, abort, jsonify
import threading
from livereload import Server

app = Flask(__name__, static_folder='static', static_url_path='/static')
app.secret_key = 'your_secret_key_here'

GROUPS = {
    'ft-201-1': '0',
    'ft-201-2': '313135890',
    'ft-202-1': '429115037',
    'ft-202-2': '1499384932',
    'ft-203-1': '1434241927',
    'ft-203-2': '101485156',
    'ft-204-1': '1801994266',
    'ft-204-2': '2063966210',
    'kn': '393945752'
}

GROUPS_COUNT ={
    '0': 14,
    '313135890' : 14,
    '429115037' : 15,
    '1499384932' : 15,
    '1434241927' : 13,
    '101485156' : 13,
    '1801994266': 13,
    '2063966210': 14,
    '393945752': 4,
}

class StudentSelector:
    EXCLUDED_STUDENTS = {
        "–ë—É—Ç–æ–≤–æ–π –í–ª–∞–¥–∏—Å–ª–∞–≤",
        "–ì–∞–ª—å—è–Ω–æ–≤ –§—ë–¥–æ—Ä",
        "–ë–∞—Ä—Ö–∞—Ç–æ–≤–∞ –ê–ª—ë–Ω–∞",
        "–ü—É–∑—ã–Ω–∏–Ω –ì–µ–æ—Ä–≥–∏–π",
        "–°–∏–¥–æ—Ä–æ–≤–∞ –ê–ª—ë–Ω–∞",
        "–û–¥–∞–π–∫–∏–Ω–∞ –ï–ª–∏–∑–∞–≤–µ—Ç–∞",
        "–Æ–¥–∏–Ω –ù–∏–∫–æ–ª–∞–π",
        "–ê—Ä—Ç–µ–º—å–µ–≤ –¢–∏–º–æ—Ñ–µ–π",
        "–ö–æ–ª–µ—Å–Ω–∏–∫–æ–≤ –ó–∞—Ö–∞—Ä",
        "–ü–µ—á–Ω–∏–∫–æ–≤ –ì–µ–æ—Ä–≥–∏–π",
        "–°–∞—Ö–±–∏–µ–≤ –ú–∞—Ä–∞—Ç",
        "–°—É—Å—Ç–∞–≤–æ–≤ –î–∞–Ω–∏–ª –°–µ—Ä–≥–µ–µ–≤–∏—á"
    }

    @staticmethod
    def get_student_data(gid):
        url = f"https://docs.google.com/spreadsheets/d/1QyIvnpMN1H3v6Ywj6QGl59KsdRbeUrtHXcAlE45sasY/export?format=csv&gid={gid}"
        df = pd.read_csv(url)

        practice_columns = [9, 11, 13, 15, 17, 20, 24, 26, 29, 31, 33, 35]

        students = []
        for row_idx in range(GROUPS_COUNT[gid]):
            try:
                row = df.iloc[row_idx]
                name = row.iloc[0]

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                if name in StudentSelector.EXCLUDED_STUDENTS:
                    continue

                total = sum(
                    float(str(val).replace(',', '.')) if str(val).replace(',', '').replace('.', '').isdigit() else 0.0
                    for val in row.iloc[practice_columns]
                )

                students.append({
                    'name': name,
                    'score': round(total, 2)
                })

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row_idx}: {e}")

        return students


@app.route('/<group_name>')
def wheel_of_fortune(group_name):
    if group_name not in GROUPS:
        abort(404)

    gid = GROUPS[group_name]
    students = StudentSelector.get_student_data(gid)

    if students is None:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö", 500

    formatted_students = [{
        "name": s['name'],
        "score": s['score']
    } for s in students]

    return render_template('wheel.html', students=formatted_students)


@app.route('/')
def main_page():
    return render_template('main.html')

MESSAGES = [
    """
    <h3>üß† –ë–µ—Å–µ–¥–∞ –º–µ–≥–∞–º–æ–∑–≥–æ–≤</h3>
    <div class="chat-log">
        <div><strong>#–•–æ–≤—Ä—ã—á–µ–≤:</strong> –ì–¥–µ –º–æ–π –ª—é–±–∏–º—ã–π –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π –º–∞—Ä–∫–µ—Ä?</div>
        <div><strong>#–ú–∏–∑—É—Ä–æ–≤–∞:</strong> –î–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –ê–Ω–¥—Ä–µ–π –Ω–∞ –ø–µ—Ä–≤–æ–π –ø–∞—Ä–µ –≤–∑—è–ª –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π –º–∞—Ä–∫–µ—Ä –∏ —Å—Ç–∞–ª —Å–º–µ—è—Ç—å—Å—è</div>
        <div><strong>#–•–æ–≤—Ä—ã—á–µ–≤:</strong> –ù—É –∞ —á—Ç–æ, —è –µ—â–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–∏–¥–µ–ª –∫–æ—Ä–∏—á–Ω–µ–≤—ã—Ö</div>
        <div><strong>#–ú–∏–∑—É—Ä–æ–≤–∞:</strong> –ê –º–∞—Ä–∫–µ—Ä—ã?</div>
    </div>
    """,

    """
    <h3>üìö –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è</h3>
    <div class="chat-log">
        <div><strong>–°:</strong> –ê —á—Ç–æ –∑–Ω–∞—á–∏—Ç –≤–æ—Ç —ç—Ç–∞ –≤–æ—Ç –∑–∞–ø–∏—Å—å –≤ —Å–∫–æ–±–æ—á–∫–∞—Ö –≤ —Ç–µ–æ—Ä–∏–∏?</div>
        <div><strong>#–•–æ–≤—Ä—ã—á–µ–≤:</strong> –¢–∞–∫, —ç—Ç–æ —è –ø–∏—Å–∞–ª. –ê –∑–∞—á–µ–º —è —ç—Ç–æ –Ω–∞–ø–∏—Å–∞–ª?</div>
    </div>
    """,

    """
    <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ-—Ö–æ–≤—Ä—ã—á–µ–≤—Å–∫–∏</h3>
    <div class="chat-log">
        <div><strong>#–•–æ–≤—Ä—ã—á–µ–≤:</strong> –≠—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–æ–∏—Ç—Å—è –≤–æ—Ç —Ç–∞–∫</div>
        <div><strong>–°:</strong> –ê –ø–æ—á–µ–º—É —Ç–∞–∫?</div>
        <div><strong>#–•–æ–≤—Ä—ã—á–µ–≤:</strong> –≠—Ç–æ —Ö–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å. –ú–æ–∂–µ—Ç–µ –¥–æ–º–∞ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∏ –º–Ω–µ –ø–æ—Ç–æ–º –æ–±—ä—è—Å–Ω–∏—Ç—å</div>
    </div>
    """,

    """
    <h3>ü§ñ –°–æ–≤–µ—Ç—ã –±—É–¥—É—â–µ–≥–æ</h3>
    <div class="chat-log">
        <div>–ú–æ–≥–ª–∏ –±—ã —É–∂–µ –¥–∞–≤–Ω–æ –≤ ChatGPT –∑–∞–±–∏—Ç—å. –°–∏–¥—è—Ç —Ç—É—Ç —á—Ç–æ-—Ç–æ, –¥—É–º–∞—é—Ç</div>
    </div>
    """,

    """
    <h3>üß† –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∫–∞</h3>
    <div class="chat-log">
        <div>–≠—Ç–æ –∑–∞–¥–∞—á–∫–∞ —Å–ª–æ–∂–Ω–∞—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –µ–µ –µ—â–µ —Ä–∞–∑ –¥–æ–º–∞...</div>
        <div><em>*–ù–∞—á–∏–Ω–∞–µ—Ç —Å–º–µ—è—Ç—å—Å—è*</em></div>
    </div>
    """,

    """
    <h3>üß† –ü–∞–º—è—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞</h3>
    <div class="chat-log">
        <div>–ö–ª–∞—Å—Å–Ω–æ, —á—Ç–æ —Ç—ã —ç—Ç–æ –ø–æ–º–Ω–∏—à—å. –•–æ—Ç—è –≤–æ–æ–±—â–µ-—Ç–æ –≤—Å–µ –¥–æ–ª–∂–Ω—ã —ç—Ç–æ –ø–æ–º–Ω–∏—Ç—å</div>
    </div>
    """,

    """
    <h3>üåô –ù–æ—á—å, —Å–ø–∏–Ω–Ω–µ—Ä –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞</h3>
    <div class="chat-log">
        <div><strong>–ê:</strong> –Ø –Ω–µ —Å–ø–∞–ª –≤—Å—é –Ω–æ—á—å –∏ —á–∏—Ç–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π. –í—ã –∑–Ω–∞–ª–∏, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –≥–æ–º–µ–æ–º–æ—Ä—Ñ–µ–Ω —Å–ø–∏–Ω–Ω–µ—Ä—É?</div>
    </div>
    """,

    """
    <h3>üßë‚Äçüè´ –°–∞–º —Å–µ–±–µ –æ–±—ä—è—Å–Ω–∏–ª</h3>
    <div class="chat-log">
        <div><strong>#–•–æ–≤—Ä—ã—á–µ–≤:</strong> –ù–µ –Ω—É —è —Å—á–∏—Ç–∞—é —á—Ç–æ —è –¥–ª—è —Å–µ–±—è –ø—Ä—è–º–æ —Ö–æ—Ä–æ—à–æ –æ–±—ä—è—Å–Ω–∏–ª</div>
        <div><strong>–°:</strong> –ù—É –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ —Ç—ã –ø–æ–Ω—è–ª</div>
    </div>
    """,
]


# Shared index with a lock for thread safety
message_index = {'value': 0}
lock = threading.Lock()

@app.route("/next-message")
def next_message():
    with lock:
        index = message_index['value']
        message = MESSAGES[index]
        # Update for next request (loop back to 0)
        message_index['value'] = (index + 1) % len(MESSAGES)
    return jsonify({"message": message})


if __name__ == '__main__':
    # app.run(host='0.0.0.0', port=5000)
    server = Server(app.wsgi_app)
    server.watch('static/')
    server.watch('templates/')
    server.serve()
